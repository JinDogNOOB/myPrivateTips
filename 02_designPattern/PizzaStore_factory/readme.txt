모든 팩토리 패턴(패턴수준이 아니라 그냥 기본이라고함 기본)
에서는 객체생성을 캡슐화한다. 

팩토리 메소드 패턴에서는 서브클래스에서 어떤 클래스를 만들지를 결정하게함으로써 객체 생성을 캡슐화한다.

추상클래스를 상속하는 구상클래스의 특정한 메소드에서 객체생성을 한다.




팩토리 메소드 패턴에서는 객체를 생성하기 위한 인터페이스를 정의하는데, 어떤 클래스의 인스턴스를 만들지는
서브클래스에서 결정하게 만든다. 
팩토리 메소드 패턴을 이용하면 클래스의 인스턴스를 만드는 일을 서브클래스에게 맡기는 것이다.








/////////////////////////////////////////////////////////////////
의존성 뒤집기 dependence inverse

이렇게 생각하는것대신
피자가게에서는 피자를파는데 피자들이 여러종류가 있겠군 이런순서로 구성하자 대신

이렇게 생각해보자
여러피자들이 있으면 하나의 피자를 인터페이스삼을수있겠군.. 이 추상화된 피자를 피자가게에서 사용하면 되겟군...



원칙을 지키는데 도움이 될만한 가이드라인
1. 어떤 변수에도 구상클래스에 대한 레퍼런스를 저장하지 말자(like new)
2. 구상클래스에서 유도된 클래스를 만들지맙시다. (인터페이스나 추상화된 클래스를 사용하자)
3. 베이스 클래스에 이미 구현되어 있던 메소드를 오버라이드하지 말자 (이미 구현되어 있는 메소드를 오버라이드한다는 애초부터 베이스 클래스가 제대로 추상화 된 것이 아니었다고 볼 수 있다. 
따라서 베이스 클래스에서 메소드를 정의할 때는 모든 서브클래스에서 공유할 수 있는 것만 정의해야한다.)

절대적인건 아닌데 지향해야할바를 말하는것이라서 알고있기만 하자..
뭐 바뀔 가능성이 없는 클래스는 저런 추상화를 안시켜도된다
String 같은거 절대 안바뀌듯이






팩토리 패턴 : 객체를 생성하기 위한 인터페이스를 만든다


팩토리 메소드와 다른 추상 팩토리 패턴

컴포지션을 사용한다 interface 
연관된 서로 의존적인 다양한 제품을 만들때 유용하게 쓰인다 