/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.test;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;
import com.rabbitmq.client.AMQP.Exchange;

public class App {
    private static final String EXCHANGE_NAME = "direct_logs";

    public static void main(String[] args) throws IOException, TimeoutException {

        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");

        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        channel.exchangeDeclare(EXCHANGE_NAME, "direct");
        String queueName = channel.queueDeclare().getQueue(); // rabbitmq 에서 랜덤으로 생성된 큐 받아온다

        channel.queueBind(queueName, EXCHANGE_NAME, "");
        System.out.println("wating for message Toexit press CTRL+C");

        DeliverCallback deliverCallback = (consumerTag, delivery) -> {
            String message = new String(delivery.getBody(), "UTF-8");
            System.out.println(message);
            delivery.getEnvelope();
            delivery.getProperties();

        };

        channel.basicConsume(queueName, true, deliverCallback, consumerTag -> {
        });
        BinderThread bt = new BinderThread(channel, queueName, EXCHANGE_NAME);
        bt.run();
        System.out.println("eof");

    }

}

class BinderThread implements Runnable {
    private Channel channel;
    private String exchangeName;
    private String queueName;

    public BinderThread(Channel channel, String queueName, String exchangeName) {
        this.channel = channel;
        this.exchangeName = exchangeName;
        this.queueName = queueName;
    }

    public void run() {
        try {
            int i = 0;
            while (true) {
                Thread.sleep(3000);
                if(i == 0){
                    System.out.println("bind debug");
                    channel.queueBind(queueName, exchangeName, "DEBUG");
                }else if(i == 1){
                    System.out.println("unbind debug");
                    channel.queueUnbind(queueName, exchangeName, "DEBUG");
                }else if(i == 2){
                    System.out.println("bind ERROR");
                    channel.queueBind(queueName, exchangeName, "ERROR");
                }else if(i==3){
                    System.out.println("bind DEBUG");
                    channel.queueBind(queueName, exchangeName, "DEBUG");
                }else if(i==4){
                    System.out.println("unbind all");
                    channel.queueUnbind(queueName, exchangeName, "DEBUG");
                    channel.queueUnbind(queueName, exchangeName, "ERROR");
                }else{
                    i = -1;
                }
                i++;
                /* switch (i) {
                case 0: {
                    System.out.println("bind debug");
                    channel.queueBind(queueName, exchangeName, "DEBUG");
                    break;
                }
                case 1: {
                    System.out.println("unbind debug");
                    channel.queueUnbind(queueName, exchangeName, "DEBUG");
                    break;
                }
                case 2: {
                    System.out.println("unbind debug");
                    channel.queueUnbind(queueName, exchangeName, "DEBUG");
                    break;
                }
                case 3: {
                    System.out.println("bind DEBUG");
                    channel.queueBind(queueName, exchangeName, "DEBUG");
                    break;
                }
                case 4: {
                    channel.queueUnbind(queueName, exchangeName, "DEBUG");
                    channel.queueUnbind(queueName, exchangeName, "ERROR");
                    break;
                }
                default: {
                    i = -1;
                }
                    i++;
                } */
            }

        } catch (Exception e) {
            e.printStackTrace();
            
        }
    }
}
