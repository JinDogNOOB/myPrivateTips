STOMP 도입 장점
stomp를 사용하면 커스텀 메시징 프로토콜을 고안하지 않아도 된다
stomp clients 라이브러리 지원
선택적으로 rabbitmq, activemq 같은 메시지 브로커 사용가능하다
어플리케이션 로직을 @Controller 인스턴스등에서 처리할수 있다. stomp destination header 에 맞춰서(raw websocket message에서는 WebSocketHandler에서 처리해야한다

# Enable STOMP
```java
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/portfolio").withSockJS();  
	// 클라이언트는 /portfolio에 웹소켓 핸드쉐이크 
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.setApplicationDestinationPrefixes("/app");
        // tomp메시지의 목적지 헤더가 /app으로 시작하는 것들은 전부 @Controller안에 @MessageMapping 메소드로 보내라 
        config.enableSimpleBroker("/topic", "/queue"); 
        // 구독과 브로드캐스팅을 위한 built-in message broker 
        // /topic이나 /queue로 목적지 헤더가 이걸로 시작하는 것들은 brocker로 라우팅해라 
    }
}	
```

클라이언트는 JSteunou/webstomp-client 를 사용하는게 좋다. 유지가 잘 되고있다.