* 커밋 단위
  커밋에 포함될 수 있는 내용이 여러 개로 나누어질 수 있을 만큼 크다면 이를 쪼개서 커밋해야 합니다. 커밋의 내용을 최소 단위로 유지하자

* 커밋 메시지 작성 규칙
  카테고리 - 간단한 메시지 - 자세한 메시지

  카테고리 : fix(에러수정), add(추가), mod(수정), rm(기능 삭제)
  간단한 메시지 : 한줄로 간단히 설명
  자세한 메시지 : 자세한 설명, 이유, 원래 문제점, 사용중인 이슈 트래커가 있다면 해당 이슈의 하이퍼링크

* 브랜치 이름 작성 규칙   
  브랜치 구분자는 /로 사용하자
  new 새 기능 추가
  test 테스트 하는 브랜치
  bug 버그 수정이 목적인 브랜치

  new/feat-foo
  new/feat-bar
  bug/critical-thing
  test/awesome-new-library

* 태그 버전 작성 규칙
  x.y.z 규칙
  x는 기존과 호환이 되지 않는 변경이 발생할 때 증가시킨다.
  y는 기존과 호환이 되며, 새로운 기능이 추가될 때 증가시킨다.
  z는 기존과 호환이 되며, 버그 수정 등이 될 때 증가시킨다.


* 프로젝트 유형별 작업 흐름

  1. git-flow : 게임이나 SI 개발 환경에 권장
    5가지의 브랜치역할을 나눔
    develop, feature, release, master, hotfix

    develop : 오직 하나만 존재하는 브랜치, 여기에서 모든 개발이 시작된다. 절대로 develop 에 곧바로 commit안한다. 여기서는 오로지 병합커밋만 한다. feature와 release와 hotfix와의
    feature : develop브랜치를 기반에 두고 브랜치되어서 기능 추가나 버그 수정을 담당, 오직 develop와 병합됨
    release : develop 브랜치에서 갈라져 나와서 배포 준비를 하는 브랜치이다. 이 브랜치는 새로운 기능 추가는 더 하지 않고 오로지 버그수정만 한다. 당연히 수정된 버그는 develop에도 병합되어야한다
    master : master 브랜치는 실제 배포되는 버전이 있는 브랜치이다.
    hotfix : master 브랜치에 (현재 배포중인 버전) 에 버그가 있어 급히 수정할 때만 사용하는 브랜치이다. hotfix로 수정한 내용은 master와 develop 브랜치에만 반영한다.

    ### 주기적으로 작업 결과를 배포하는 프로젝트의 경우에 적합한 방식이다.
    ### 매우 견고한 코드를 생산하면서 배포간격이 충분히 긴 프로그램이나 솔루션을 다루는 프로젝트에 적합하다.
    ### 대신 빠른 개발과 배포에는 알맞지 않다

  2. github-flow : 웹 애플리케이션(빠른 개발)
    git-flow의 단점을 보완하고자 github에서 사용하는 github-flow 이다.
    2가지의 브랜치만 존재한다
    master, feature
    
    master : 언제나 배포할 수 있는 상태로 유지되는 브랜치이다. master 브랜치가 곧 배포 브랜치이다. 하나만 존재한다. 오직 병합커밋만 할 수 있다.
    feature : master 브랜치에서 갈라져서 새 기능을 추가하거나 버그수정, 그 외의 모든 코드 수정을 담당한다.

  3. gitlab-flow : 모바일 앱과 게임
    앞의 git-flow와 github-flow는 양 극단의 작업 흐름방식이다.
    git-flow는 너무나 답답하고 github-flow는 너무나 가볍다

    이 두가지 방식의 중간에 서는 것이 gitlab-flow 이다 
    기본적인 작업흐름은 github-flow이지만 GitLab 에서 개선한 배포과정이 포함된 흐름이라고 생가하면 된다.
