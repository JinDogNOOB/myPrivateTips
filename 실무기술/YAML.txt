Yet Another Markup Language 또 다른 마크업 언어
주석쓸수있어서 JSON보단 더 뭔가 설정파일등으로 쓸때 장점이 있음

* YAML 특징

 - 주석 지원 : 주석이 가능하면 좋다, 설정파일같은거 설명같은거 넣기도 좋기 때문
 - UTF-8 과 UTF-16 지원
 - 앵커와 별칭 : YAML이 관리하기 쉽고 규격이 다른 이유는 앵커(anchors)와 별칭(aliases) 기능 때문이다. 윈도우의 바로가기처럼 원본데이터에 앵커를 설정하고 이를 가리키는 여러 별칭을 만든다.
 - TAB 쓰지말자 오직 스페이스바만 쓰자..


* YAML 구조
JSON과 상당히 유사

number: 12345
pi: 3.14
str: 문자열 값
null_key: ~
object:
  str2: 문자열값2
  object:
    number2: 12345
num_array:
- 1
- 2
- 3
- 4
- 5
str_array:
- one
- two
- three
- four
- five

배열 외에는 거의 유사
배열은 다음과 같이 대응됨
json 
"num_array":[ 1,2,3,4,5]

yaml
num_array:
- 1
- 2
- 3
- 4
- 5


* YAML 파일은 Json과 똑같이 dict 자료형으로 생성되기 때문에 읽어와서 출력하면 JSON과 거의 동일한 출력값이 나옴 json과 닮게
* 키와 값 읽는것도 json과 거의 동일


* 주석은 #으로 시작하는 모든 줄과 # 이후 문자열이 주석으로 처리됨


* 앵커(&)와 별칭(*)

number : &num 12345 # 이제 이 변수는 *num으로 접근 가능
object:
  str2: 문자열값2
  object2:
    number2: *num  #number2는 number의 값 12345를 참조한다.


* 객체에 앵커와 별칭 사용하기

definitions:
  default: &default
    min_log_level: info
    app_name: realapp
    log_dir: logs
    secure_mode: false
configurations:
  dev: *default
  qa: *default
  production: *default


* 모든 설정이 default로 되있을 경우는 없음 뭔가는 다르기 마련 
  이때 공통된 값을 가지되 각 환경에 맞는 값들이 달라야함.
  별칭 덮어쓰기 형태로 사용 가능

definitions:
  default: &default
    min_log_level: info
    app_name: realapp
    log_dir: logs
    secure_mode: false
configurations:
  dev:
    <<: *default
    min_log_level: verbose
    server_url: http://dev.realapp.com
  qa:
    <<: *default
    server_url: http://qa.realapp.com
  production:
    <<: *default
    min_log_level: warning
    secure_mode: true
    server_url: http://www.realapp.com

<<:  이 키워드를 사용하면 앵커로 참조하는 값에 더 많은 값을 추가하거나 덮어쓸수있음