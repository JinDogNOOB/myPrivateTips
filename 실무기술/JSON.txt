* JSON 
 UTF-8 규격

json ex)
{
  "number": 12345,
  "str": "문자열",
  "null_key": null,
  "object": {
    "str2" : "문자열값2",
    "object2" : {
      "number2": 123
    }
  },
  "num_array": [1,2,3,4,5],
  "str_array": ["one", "two", "three", "four"]
}

키 밸류 형식

밸류 안에 "를 문자로서 저장하고싶으면 이스케이프문자 앞에 붙이면 됨

파이썬, 자바, C# 에서 제공한 JSON 라이브러리는 JSON데이터를 클래스, 맵, 리스트 등의 객체로 변환해주는 직렬화 기능을 제공함



* JSON 단점

 - 텍스트 기반이므로 불필요한 트래픽 오버헤드가 있음
프로토콜 버퍼와 비교했을시 2배이상의 바이트를 더 사용함
 - 메시지 호환성 유지하기 어려움
모든 텍스트 기반 데이터의 단점. 서버와 클라이언트가 JSON 메시지(v1)을 사용하다가 서버가 JSON 메시지(v2)로 바꿨을때 서로 맞지 않아 문제가 생길 수 있음. 

"version" : 1,
"data" : {...} 식으로 하거나

RESTful API를 사용할 때 버전을 주소에 넣어 해결하는 경우도 있음
https://example.com/v2/request


